#!/usr/bin/env python
"""
Run the tests for this project using unittest2 test discovery. This is
essentially equivalent to running ``unit2 discover``, it just allows us to set
up the path and settings environment (and measure coverage).

"""
import os, sys

import coverage
from unittest2.main import main as unittest_main


def main(basedir, cover_all=False):
    cov = coverage.coverage(branch=True)
    cov.start()

    from django.test.utils import (
        setup_test_environment, teardown_test_environment)

    setup_test_environment()

    ut = unittest_main(module=None, exit=False)

    cov.stop()

    include = [
        os.path.join(basedir, "tests/builder.py"),
        os.path.join(basedir, "tests/responses.py"),
        os.path.join(basedir, "tests/utils.py")
        ]
    report_kw = {"directory": os.path.join(basedir, "htmlcov")}
    if cover_all:
        # include all python modules under bugdash in report, including even
        # those the tests don't cause to be imported at all yet, so as to
        # get a more accurate overall coverage figure.
        py_files = include
        for dirpath, dirs, filenames in os.walk(
            os.path.join(basedir, "src", "bugdash")):
            py_files.extend([os.path.join(dirpath, fn)
                             for fn in filenames if fn.endswith(".py")])
        report_kw["morfs"] = py_files
        report_kw["omit"] = [
            "src/bugdash/compressor_filters.py",
            # non-default settings files aren't exercised in tests
            "src/bugdash/settings_local.py",
            "src/bugdash/settings_local.sample.py"
            ]
    else:
        report_kw["include"] = include + [os.path.join(basedir, "src/bugdash/*")]
    cov.html_report(**report_kw)

    teardown_test_environment()


if __name__ == "__main__":
    basedir = os.path.dirname(os.path.dirname(__file__))
    sys.path.insert(0, basedir)
    if os.environ.get("DJANGO_SETTINGS_MODULE", None) is None:
        os.environ["DJANGO_SETTINGS_MODULE"] = "tests.settings"

    # if a particular test module / suite / case is not specified,
    # do discovery by default
    if not [a for a in sys.argv[1:] if not a.startswith("-")]:
        sys.argv[1:1] = ["discover", "-s", basedir]

    # support an additional option, --cover-all, for a fuller coverage report
    cover_all = False
    if "--cover-all" in sys.argv:
        sys.argv.remove("--cover-all")
        cover_all = True

    main(basedir, cover_all)
